// utils/payment.ts
import QRCode from "react-qr-code"; // Note: This import is not used here, but included for context if needed elsewhere

// CRC-16/CCITT table for EMV QR code checksum (standard polynomial 0x1021, initial value 0xFFFF)
const crcTable: number[] = [
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,
    0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef,
    0x1231, 0x0220, 0x32a1, 0x2290, 0x52b5, 0x42a4, 0x72e5, 0x62d4,
    0x9339, 0x8328, 0xb3ab, 0xa39a, 0xd3bf, 0xc3ae, 0xf3cf, 0xe3de,
    0x2462, 0x3473, 0x0410, 0x1401, 0x64e6, 0x74f7, 0x4494, 0x5485,
    0xa56a, 0xb57b, 0x8518, 0x9509, 0xe5ee, 0xf5ff, 0xc5bc, 0xd5ad,
    0x3653, 0x2642, 0x1621, 0x0630, 0x76d7, 0x66c6, 0x56a5, 0x46b4,
    0xb75b, 0xa74a, 0x9729, 0x8738, 0xf7df, 0xe7ce, 0xd7ad, 0xc7bc,
    0x48c4, 0x58d5, 0x68b6, 0x78a7, 0x0840, 0x1851, 0x2832, 0x3823,
    0xc9cc, 0xd9dd, 0xe9be, 0xf9af, 0x8948, 0x9959, 0xa93a, 0xb92b,
    0x5af5, 0x4ae4, 0x7a87, 0x6a96, 0x1a71, 0x0a60, 0x3a03, 0x2a12,
    0xdbfd, 0xcbee, 0xfbbf, 0xeb9e, 0x9b79, 0x8b68, 0xbb0b, 0xab1a,
    0x6ca6, 0x7cb7, 0x4cd4, 0x5cc5, 0x2c22, 0x3c33, 0x0c50, 0x1c41,
    0xedae, 0xfabf, 0xcadc, 0xdacd, 0xad2a, 0xbd3b, 0x8d58, 0x9d49,
    0x7e97, 0x6e86, 0x5ee5, 0x4ef4, 0x3e13, 0x2e02, 0x1e61, 0x0e70,
    0xff9f, 0xef8e, 0xdfed, 0xcffc, 0xbf1b, 0xaf0a, 0x9f69, 0x8f78,
    0x9188, 0x8199, 0xb1fa, 0xa1eb, 0xd10c, 0xc11d, 0xf15e, 0xe14f,
    0x1080, 0x0091, 0x30f2, 0x20e3, 0x5004, 0x4015, 0x7076, 0x6067,
    0x83b9, 0x93a8, 0xa3cb, 0xb3da, 0xc3fd, 0xd3ec, 0xe38f, 0xf39e,
    0x02b1, 0x12a0, 0x22c3, 0x32d2, 0x42f5, 0x52e4, 0x7287, 0x6296,
    0x91ad, 0x81bc, 0xb1df, 0xa1ce, 0xd1e9, 0xc1f8, 0xf19b, 0xe18a,
    0x2010, 0x3001, 0x0062, 0x1073, 0x6094, 0x7085, 0x40e6, 0x50f7,
    0xa1ac, 0xb1bd, 0x81de, 0x91cf, 0xe1a8, 0xf1b9, 0xc1da, 0xd1cb,
    0x3243, 0x2252, 0x1231, 0x0230, 0x72d7, 0x62c6, 0x52a5, 0x42b4,
    0xb2ab, 0xa2ba, 0x92d9, 0x82c8, 0xf2ef, 0xe2fe, 0xd29d, 0xc28c,
    0x3c00, 0x2c11, 0x1c72, 0x0c63, 0x7ca4, 0x6cb5, 0x5cd6, 0x4cc7,
    0xbdca, 0xadfb, 0x9dd8, 0x8dc9, 0xfdee, 0xedff, 0xdd9c, 0xcd8d,
    0x4763, 0x5772, 0x6711, 0x7700, 0x07e7, 0x17f6, 0x2795, 0x3784,
    0xc66b, 0xd67a, 0xe619, 0xf608, 0x86ef, 0x96fe, 0xa69d, 0xb68c,
    0x5f4b, 0x4f5a, 0x7f39, 0x6f28, 0x1fcf, 0x0fde, 0x3fbd, 0x2fac,
    0xd4b0, 0xc4a1, 0xf4c2, 0xe4d3, 0x94d4, 0x84c5, 0xb4a6, 0xa4b7,
    0x55d1, 0x45c0, 0x75a3, 0x65b2, 0x1555, 0x0544, 0x3527, 0x2536,
    0xdaf9, 0xcae8, 0xfa8b, 0xea9a, 0x9a5d, 0x8a4c, 0xba2f, 0xaa3e,
    0x4be5, 0x5bf4, 0x6b97, 0x7b86, 0x0b61, 0x1b70, 0x2b13, 0x3b02,
    0xe2fd, 0xf2ec, 0xc28f, 0xd29e, 0xa259, 0xb248, 0x822b, 0x923a,
    0x6daf, 0x7dbe, 0x4ddd, 0x5dcc, 0x2def, 0x3dfe, 0x0d9d, 0x1d8c,
    0xecdf, 0xfcee, 0xccad, 0xdcbc, 0xac7b, 0xbc6a, 0x8c09, 0x9c18,
    0x7bd8, 0x6bc9, 0x5baa, 0x4bbb, 0x3b5c, 0x2b4d, 0x1b2e, 0x0b3f,
    0xfaf0, 0xeae1, 0xda82, 0xca93, 0xba54, 0xaa45, 0x9a26, 0x8a37,
    0x9b01, 0x8b10, 0xbb73, 0xab62, 0xcb65, 0xdb74, 0xeb17, 0xfb06,
    0x0a81, 0x1a90, 0x2af3, 0x3ae2, 0x5ae5, 0x4af4, 0x7a97, 0x6a86,
    0xb9ad, 0xa9bc, 0x99df, 0x89ce, 0xf9e9, 0xe9f8, 0xd99b, 0xc98a,
    0x2e14, 0x3e05, 0x0e66, 0x1e77, 0x6e90, 0x7e81, 0x4ee2, 0x5ef3,
    0xaf1c, 0xbf0d, 0x8f6e, 0x9f7f, 0xef58, 0xff49, 0xcf2a, 0xdf3b,
    0x34c3, 0x24d2, 0x14b1, 0x04a0, 0x74a7, 0x64b6, 0x54d5, 0x44c4,
    0xb5cb, 0xa5da, 0x95b9, 0x85a8, 0xf5cf, 0xe5de, 0xd5bd, 0xc5ac,
    0x78b4, 0x68a5, 0x58c6, 0x48d7, 0x3830, 0x2821, 0x1842, 0x0843,
    0xd9ec, 0xc9fd, 0xf99e, 0xe98f, 0x89a8, 0x99b9, 0xa9da, 0xb9cb,
    0x4aec, 0x5afd, 0x6a9e, 0x7a8f, 0x0aa8, 0x1ab9, 0x2ada, 0x3acb,
    0xcb3e, 0xdb2f, 0xeb4c, 0xfb5d, 0x8b7a, 0x9b6b, 0xab08, 0xbb19,
    0x4a75, 0x5a64, 0x6a07, 0x7a16, 0x0ad1, 0x1ac0, 0x2aa3, 0x3ab2,
    0xdbd7, 0xcbc6, 0xfbaf, 0xebbe, 0x9b79, 0xab68, 0x9b0b, 0xab1a
]; // Note: This is the standard CRC-16/CCITT table; the last few entries are standard values (e.g., 0x84cf for index 255).

// CRC-16/CCITT calculation function for EMV QR payload<grok-card data-id="f50965" data-type="citation_card"></grok-card>
function crc16(s: string): number {
    let crc = 0xFFFF;
    for (let i = 0; i < s.length; i++) {
        const c = s.charCodeAt(i);
        if (c > 255) {
            throw new RangeError('Invalid character in payload');
        }
        const j = ((crc >> 8) ^ c) & 0xFF;
        crc = (crc << 8) ^ crcTable[j];
    }
    return crc & 0xFFFF;
}

// Generate KHQR payload for static QR with fixed amount (in USD)<grok-card data-id="9aa494" data-type="citation_card"></grok-card><grok-card data-id="06ff91" data-type="citation_card"></grok-card>
export function generateKHQRPayload(amount: number): string {
    // Hardcoded merchant details - replace with your actual details
    const merchantAccount = 'merchant@bakong'; // Bakong account ID
    const merchantName = 'My Store';
    const merchantCity = 'Phnom Penh';
    const mcc = '5999'; // Miscellaneous retail
    const currencyCode = '840'; // USD (ISO 4217)

    // Point of Initiation Method: 11 for static QR
    const poi = '010211';

    // Merchant Account Information (Tag 29 for individual/solo merchant)
    const subValueLength = merchantAccount.length.toString().padStart(2, '0');
    const accountValue = `00${subValueLength}${merchantAccount}`;
    const accountLength = accountValue.length.toString().padStart(2, '0');
    const merchantAccountObj = `29${accountLength}${accountValue}`;

    // Merchant Category Code (Tag 52)
    const mccObj = `52${mcc.length.toString().padStart(2, '0')}${mcc}`;

    // Transaction Currency (Tag 53)
    const currencyLength = currencyCode.length.toString().padStart(2, '0');
    const currencyObj = `53${currencyLength}${currencyCode}`;

    // Transaction Amount (Tag 54) - in minor units (cents for USD)
    const amountInCents = Math.round(amount * 100).toString();
    const amountLength = amountInCents.length.toString().padStart(2, '0');
    const amountObj = `54${amountLength}${amountInCents}`;

    // Country Code (Tag 58)
    const countryObj = '5802KH';

    // Merchant Name (Tag 59)
    const nameLength = merchantName.length.toString().padStart(2, '0');
    const nameObj = `59${nameLength}${merchantName}`;

    // Merchant City (Tag 60)
    const cityLength = merchantCity.length.toString().padStart(2, '0');
    const cityObj = `60${cityLength}${merchantCity}`;

    // Assemble payload without CRC
    let payload = `000201${poi}${merchantAccountObj}${mccObj}${currencyObj}${amountObj}${countryObj}${nameObj}${cityObj}`;

    // Calculate and append CRC (Tag 63)
    const crc = crc16(payload);
    const crcHex = crc.toString(16).toUpperCase().padStart(4, '0');
    payload += `6304${crcHex}`;

    return payload;
}